
Allocating common symbols
Common symbol       size              file

isr_table           0x80              soc-hw.o

Memory Configuration

Name             Origin             Length             Attributes
ram              0x00000000         0x00001000
*default*        0x00000000         0xffffffff

Linker script and memory map

                0x00000000                __DYNAMIC = 0x0
                0x00000000                _RAM_START = 0x0
                0x00001000                _RAM_SIZE = 0x1000
                0x00001000                _RAM_END = (_RAM_START + _RAM_SIZE)

.text           0x00000000      0x5dc
                0x00000000                _ftext = .
 *(.text .stub .text.* .gnu.linkonce.t.*)
 .text          0x00000000      0x208 crt0ram.o
                0x00000000                _start
                0x00000140                irq_enable
                0x0000014c                irq_disable
                0x00000158                irq_set_mask
                0x00000160                irq_get_mask
                0x00000168                jump
                0x0000016c                halt
                0x000001f8                get_sp
                0x00000200                get_gp
 .text          0x00000208      0x27c main.o
                0x00000208                irq_handler
                0x00000308                main
 .text          0x00000484      0x158 soc-hw.o
                0x00000484                isr_null
                0x00000488                isr_init
                0x000004ac                isr_register
                0x000004c4                isr_unregister
                0x000004e4                lcd_wait
                0x00000500                lcd_write
                0x00000538                lcd_clear
                0x0000055c                uart_init
                0x00000560                uart_getchar
                0x00000584                uart_putchar
                0x000005a8                uart_putstr
                0x000005dc                _etext = .

.rodata         0x000005dc       0x38
                0x000005dc                . = ALIGN (0x4)
                0x000005dc                _frodata = .
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata.cst4   0x000005dc       0x38 main.o
 *(.rodata1)
                0x00000614                _erodata = .

.data           0x00000614       0x14
                0x00000614                . = ALIGN (0x4)
                0x00000614                _fdata = .
 *(.data .data.* .gnu.linkonce.d.*)
 .data          0x00000614        0x0 crt0ram.o
 .data          0x00000614        0x0 main.o
 .data          0x00000614       0x14 soc-hw.o
                0x00000614                uart0
                0x00000618                lcd0
                0x0000061c                key0
                0x00000620                sim0
                0x00000624                sram0
 *(.data1)
                0x00000630                _gp = ALIGN (0x10)
 *(.sdata .sdata.* .gnu.linkonce.s.*)
                0x00000628                _edata = .

.bss            0x00000628       0x80
                0x00000628                . = ALIGN (0x4)
                0x00000628                _fbss = .
 *(.dynsbss)
 *(.sbss .sbss.* .gnu.linkonce.sb.*)
 *(.scommon)
 *(.dynbss)
 *(.bss .bss.* .gnu.linkonce.b.*)
 .bss           0x00000628        0x0 crt0ram.o
 .bss           0x00000628        0x0 main.o
 .bss           0x00000628        0x0 soc-hw.o
 *(COMMON)
 COMMON         0x00000628       0x80 soc-hw.o
                0x00000628                isr_table
                0x000006a8                _ebss = .
                0x000006a8                _end = .
                0x00000ffc                PROVIDE (_fstack, ((ORIGIN (ram) + 0x1000) - 0x4))
LOAD crt0ram.o
LOAD main.o
LOAD soc-hw.o
OUTPUT(image elf32-lm32)

.debug_abbrev   0x00000000      0x249
 .debug_abbrev  0x00000000       0xaf main.o
 .debug_abbrev  0x000000af      0x19a soc-hw.o

.debug_info     0x00000000      0x5fb
 .debug_info    0x00000000      0x1bd main.o
 .debug_info    0x000001bd      0x43e soc-hw.o

.debug_line     0x00000000      0x38e
 .debug_line    0x00000000      0x1da main.o
 .debug_line    0x000001da      0x1b4 soc-hw.o

.debug_frame    0x00000000       0xf0
 .debug_frame   0x00000000       0x30 main.o
 .debug_frame   0x00000030       0xc0 soc-hw.o

.debug_loc      0x00000000       0xa3
 .debug_loc     0x00000000       0x13 main.o
 .debug_loc     0x00000013       0x90 soc-hw.o

.debug_pubnames
                0x00000000      0x121
 .debug_pubnames
                0x00000000       0x2b main.o
 .debug_pubnames
                0x0000002b       0xf6 soc-hw.o

.debug_pubtypes
                0x00000000       0x89
 .debug_pubtypes
                0x00000000       0x33 main.o
 .debug_pubtypes
                0x00000033       0x56 soc-hw.o

.debug_aranges  0x00000000       0x40
 .debug_aranges
                0x00000000       0x20 main.o
 .debug_aranges
                0x00000020       0x20 soc-hw.o

.debug_str      0x00000000      0x1bd
 .debug_str     0x00000000       0xdd main.o
                                 0xe9 (size before relaxing)
 .debug_str     0x000000dd       0xe0 soc-hw.o
                                0x1b6 (size before relaxing)

.comment        0x00000000       0x27
 .comment       0x00000000       0x27 main.o
                                 0x28 (size before relaxing)
 .comment       0x00000000       0x28 soc-hw.o
