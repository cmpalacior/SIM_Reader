
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005dc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000038  000005dc  000005dc  00000630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000614  00000614  00000668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000080  00000628  00000628  0000067c  2**2
                  ALLOC
  4 .debug_abbrev 00000249  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fb  00000000  00000000  000008c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000038e  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a3  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000121  00000000  00000000  000013e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000089  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  0000158d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001bd  00000000  00000000  000015cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000027  00000000  00000000  0000178a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 4f 	calli 208 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 06 30 	ori gp,gp,0x630
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 06 28 	ori r1,r1,0x628
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 a8 	ori r3,r3,0x6a8

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 73 	calli 308 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <irq_handler>:
#include "soc-hw.h"

void irq_handler(uint32_t irq)
{
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
      lcd_wait();
      sim0->sim_reg = 0x10;
 21c:	78 0b 00 00 	mvhi r11,0x0
#include "soc-hw.h"

void irq_handler(uint32_t irq)
{
      lcd_wait();
 220:	f8 00 00 b1 	calli 4e4 <lcd_wait>
      sim0->sim_reg = 0x10;
 224:	39 6b 06 20 	ori r11,r11,0x620
 228:	29 65 00 00 	lw r5,(r11+0)
 22c:	34 0d 00 10 	mvi r13,16
      lcd_write(sim0->data0, sim0->data1, sim0->data2, sim0->data3, sim0->data4);
      lcd_wait();
      lcd0->lcd_ins = LCD_CHR;
 230:	78 0c 00 00 	mvhi r12,0x0
#include "soc-hw.h"

void irq_handler(uint32_t irq)
{
      lcd_wait();
      sim0->sim_reg = 0x10;
 234:	58 ad 00 18 	sw (r5+24),r13
      lcd_write(sim0->data0, sim0->data1, sim0->data2, sim0->data3, sim0->data4);
 238:	28 a1 00 04 	lw r1,(r5+4)
 23c:	28 a2 00 08 	lw r2,(r5+8)
 240:	28 a3 00 0c 	lw r3,(r5+12)
 244:	28 a4 00 10 	lw r4,(r5+16)
 248:	28 a5 00 14 	lw r5,(r5+20)
      lcd_wait();
      lcd0->lcd_ins = LCD_CHR;
 24c:	39 8c 06 18 	ori r12,r12,0x618

void irq_handler(uint32_t irq)
{
      lcd_wait();
      sim0->sim_reg = 0x10;
      lcd_write(sim0->data0, sim0->data1, sim0->data2, sim0->data3, sim0->data4);
 250:	f8 00 00 ac 	calli 500 <lcd_write>
      lcd_wait();
 254:	f8 00 00 a4 	calli 4e4 <lcd_wait>
      lcd0->lcd_ins = LCD_CHR;
 258:	29 81 00 00 	lw r1,(r12+0)
 25c:	58 2d 00 18 	sw (r1+24),r13
      lcd_wait();
 260:	f8 00 00 a1 	calli 4e4 <lcd_wait>
      sim0->sim_reg = 0x11;
 264:	29 65 00 00 	lw r5,(r11+0)
 268:	34 01 00 11 	mvi r1,17
 26c:	58 a1 00 18 	sw (r5+24),r1
      lcd_write(sim0->data0, sim0->data1, sim0->data2, sim0->data3, sim0->data4);
 270:	28 a1 00 04 	lw r1,(r5+4)
 274:	28 a2 00 08 	lw r2,(r5+8)
 278:	28 a3 00 0c 	lw r3,(r5+12)
 27c:	28 a4 00 10 	lw r4,(r5+16)
 280:	28 a5 00 14 	lw r5,(r5+20)
 284:	f8 00 00 9f 	calli 500 <lcd_write>
      lcd_wait();
 288:	f8 00 00 97 	calli 4e4 <lcd_wait>
      lcd0->lcd_ins = LCD_CHR;
 28c:	29 81 00 00 	lw r1,(r12+0)
 290:	58 2d 00 18 	sw (r1+24),r13
      lcd_wait();
 294:	f8 00 00 94 	calli 4e4 <lcd_wait>
      sim0->sim_reg = 0x12;
 298:	29 65 00 00 	lw r5,(r11+0)
 29c:	34 01 00 12 	mvi r1,18
 2a0:	58 a1 00 18 	sw (r5+24),r1
      lcd_write(sim0->data0, sim0->data1, sim0->data2, sim0->data3, sim0->data4);
 2a4:	28 a1 00 04 	lw r1,(r5+4)
 2a8:	28 a2 00 08 	lw r2,(r5+8)
 2ac:	28 a3 00 0c 	lw r3,(r5+12)
 2b0:	28 a4 00 10 	lw r4,(r5+16)
 2b4:	28 a5 00 14 	lw r5,(r5+20)
 2b8:	f8 00 00 92 	calli 500 <lcd_write>
        lcd_wait();
 2bc:	f8 00 00 8a 	calli 4e4 <lcd_wait>
      lcd0->lcd_ins = LCD_CHR;
 2c0:	29 81 00 00 	lw r1,(r12+0)
 2c4:	58 2d 00 18 	sw (r1+24),r13
      lcd_wait();
 2c8:	f8 00 00 87 	calli 4e4 <lcd_wait>
      sim0->sim_reg = 0x13;
 2cc:	29 65 00 00 	lw r5,(r11+0)
 2d0:	34 01 00 13 	mvi r1,19
 2d4:	58 a1 00 18 	sw (r5+24),r1
      lcd_write(sim0->data0, sim0->data1, sim0->data2, sim0->data3, sim0->data4);
 2d8:	28 a1 00 04 	lw r1,(r5+4)
 2dc:	28 a2 00 08 	lw r2,(r5+8)
 2e0:	28 a3 00 0c 	lw r3,(r5+12)
 2e4:	28 a4 00 10 	lw r4,(r5+16)
 2e8:	28 a5 00 14 	lw r5,(r5+20)
 2ec:	f8 00 00 85 	calli 500 <lcd_write>
}
 2f0:	2b 9d 00 04 	lw ra,(sp+4)
 2f4:	2b 8b 00 10 	lw r11,(sp+16)
 2f8:	2b 8c 00 0c 	lw r12,(sp+12)
 2fc:	2b 8d 00 08 	lw r13,(sp+8)
 300:	37 9c 00 10 	addi sp,sp,16
 304:	c3 a0 00 00 	ret

00000308 <main>:

int main ()
{
 308:	37 9c ff f4 	addi sp,sp,-12
 30c:	5b 8b 00 0c 	sw (sp+12),r11
 310:	5b 8c 00 08 	sw (sp+8),r12
 314:	5b 9d 00 04 	sw (sp+4),ra
  irq_enable();
 318:	fb ff ff 8a 	calli 140 <irq_enable>
  irq_set_mask(0x00000004);
 31c:	34 01 00 04 	mvi r1,4
 320:	fb ff ff 8e 	calli 158 <irq_set_mask>
  lcd_wait();
 324:	f8 00 00 70 	calli 4e4 <lcd_wait>
  lcd_write(0x20202020, 0x4C656374, 0x6F722064, 0x65205349, 0x4D202020);
 328:	78 02 00 00 	mvhi r2,0x0
 32c:	78 03 00 00 	mvhi r3,0x0
 330:	78 04 00 00 	mvhi r4,0x0
 334:	78 05 00 00 	mvhi r5,0x0
 338:	78 06 00 00 	mvhi r6,0x0
 33c:	38 c6 05 ec 	ori r6,r6,0x5ec
 340:	38 42 05 dc 	ori r2,r2,0x5dc
 344:	38 63 05 e0 	ori r3,r3,0x5e0
 348:	38 84 05 e4 	ori r4,r4,0x5e4
 34c:	38 a5 05 e8 	ori r5,r5,0x5e8
 350:	28 41 00 00 	lw r1,(r2+0)
 354:	28 62 00 00 	lw r2,(r3+0)
 358:	28 83 00 00 	lw r3,(r4+0)
 35c:	28 a4 00 00 	lw r4,(r5+0)
 360:	28 c5 00 00 	lw r5,(r6+0)
  lcd_wait();
  lcd0->lcd_ins = LCD_CHR;
 364:	78 0b 00 00 	mvhi r11,0x0
 368:	39 6b 06 18 	ori r11,r11,0x618
int main ()
{
  irq_enable();
  irq_set_mask(0x00000004);
  lcd_wait();
  lcd_write(0x20202020, 0x4C656374, 0x6F722064, 0x65205349, 0x4D202020);
 36c:	f8 00 00 65 	calli 500 <lcd_write>
  lcd_wait();
 370:	f8 00 00 5d 	calli 4e4 <lcd_wait>
  lcd0->lcd_ins = LCD_CHR;
 374:	29 61 00 00 	lw r1,(r11+0)
 378:	34 0c 00 10 	mvi r12,16
 37c:	58 2c 00 18 	sw (r1+24),r12
  lcd_wait();
 380:	f8 00 00 59 	calli 4e4 <lcd_wait>
  lcd_write(0x20202020, 0x20202020, 0x20202020, 0x20202020, 0x20202020);
 384:	78 02 00 00 	mvhi r2,0x0
 388:	38 42 05 dc 	ori r2,r2,0x5dc
 38c:	28 41 00 00 	lw r1,(r2+0)
 390:	b8 20 10 00 	mv r2,r1
 394:	b8 20 18 00 	mv r3,r1
 398:	b8 20 20 00 	mv r4,r1
 39c:	b8 20 28 00 	mv r5,r1
 3a0:	f8 00 00 58 	calli 500 <lcd_write>
  lcd_wait();
 3a4:	f8 00 00 50 	calli 4e4 <lcd_wait>
  lcd0->lcd_ins = LCD_CHR;
 3a8:	29 61 00 00 	lw r1,(r11+0)
 3ac:	58 2c 00 18 	sw (r1+24),r12
  lcd_wait();
 3b0:	f8 00 00 4d 	calli 4e4 <lcd_wait>
  lcd_write(0x20436872, 0x69737469, 0x616E2050, 0x616C6163, 0x696F2020);
 3b4:	78 04 00 00 	mvhi r4,0x0
 3b8:	78 06 00 00 	mvhi r6,0x0
 3bc:	38 84 05 f4 	ori r4,r4,0x5f4
 3c0:	38 c6 05 fc 	ori r6,r6,0x5fc
 3c4:	28 82 00 00 	lw r2,(r4+0)
 3c8:	78 03 00 00 	mvhi r3,0x0
 3cc:	28 c4 00 00 	lw r4,(r6+0)
 3d0:	78 05 00 00 	mvhi r5,0x0
 3d4:	78 06 00 00 	mvhi r6,0x0
 3d8:	38 c6 06 00 	ori r6,r6,0x600
 3dc:	38 63 05 f0 	ori r3,r3,0x5f0
 3e0:	38 a5 05 f8 	ori r5,r5,0x5f8
 3e4:	28 61 00 00 	lw r1,(r3+0)
 3e8:	28 a3 00 00 	lw r3,(r5+0)
 3ec:	28 c5 00 00 	lw r5,(r6+0)
 3f0:	f8 00 00 44 	calli 500 <lcd_write>
  lcd_wait();
 3f4:	f8 00 00 3c 	calli 4e4 <lcd_wait>
  lcd0->lcd_ins = LCD_CHR;
 3f8:	29 61 00 00 	lw r1,(r11+0)
 3fc:	58 2c 00 18 	sw (r1+24),r12
  lcd_wait();
 400:	f8 00 00 39 	calli 4e4 <lcd_wait>
  lcd_write(0x204D6967, 0x75656C20, 0x4C696D61, 0x73202020, 0x20202020);
 404:	78 02 00 00 	mvhi r2,0x0
 408:	78 03 00 00 	mvhi r3,0x0
 40c:	78 04 00 00 	mvhi r4,0x0
 410:	78 05 00 00 	mvhi r5,0x0
 414:	78 06 00 00 	mvhi r6,0x0
 418:	38 c6 05 dc 	ori r6,r6,0x5dc
 41c:	38 42 06 04 	ori r2,r2,0x604
 420:	38 63 06 08 	ori r3,r3,0x608
 424:	38 84 06 0c 	ori r4,r4,0x60c
 428:	38 a5 06 10 	ori r5,r5,0x610
 42c:	28 41 00 00 	lw r1,(r2+0)
 430:	28 62 00 00 	lw r2,(r3+0)
 434:	28 83 00 00 	lw r3,(r4+0)
 438:	28 a4 00 00 	lw r4,(r5+0)
 43c:	28 c5 00 00 	lw r5,(r6+0)
 440:	f8 00 00 30 	calli 500 <lcd_write>
  lcd_wait();
 444:	f8 00 00 28 	calli 4e4 <lcd_wait>
  lcd0->lcd_ins = LCD_CHR;
  sim0->sim_reg = SIM_EN;
 448:	78 01 00 00 	mvhi r1,0x0
  lcd_wait();
  lcd0->lcd_ins = LCD_CHR;
  lcd_wait();
  lcd_write(0x204D6967, 0x75656C20, 0x4C696D61, 0x73202020, 0x20202020);
  lcd_wait();
  lcd0->lcd_ins = LCD_CHR;
 44c:	29 63 00 00 	lw r3,(r11+0)
  sim0->sim_reg = SIM_EN;
 450:	38 21 06 20 	ori r1,r1,0x620
 454:	28 22 00 00 	lw r2,(r1+0)
  lcd_wait();
  lcd0->lcd_ins = LCD_CHR;
  lcd_wait();
  lcd_write(0x204D6967, 0x75656C20, 0x4C696D61, 0x73202020, 0x20202020);
  lcd_wait();
  lcd0->lcd_ins = LCD_CHR;
 458:	58 6c 00 18 	sw (r3+24),r12
  sim0->sim_reg = SIM_EN;
 45c:	58 4c 00 18 	sw (r2+24),r12
  while (! (sim0->sim_cr & SIM_DONE));
 460:	28 41 00 00 	lw r1,(r2+0)
 464:	20 21 00 01 	andi r1,r1,0x1
 468:	44 20 ff fe 	be r1,r0,460 <main+0x158>
  return 0;
}
 46c:	34 01 00 00 	mvi r1,0
 470:	2b 9d 00 04 	lw ra,(sp+4)
 474:	2b 8b 00 0c 	lw r11,(sp+12)
 478:	2b 8c 00 08 	lw r12,(sp+8)
 47c:	37 9c 00 0c 	addi sp,sp,12
 480:	c3 a0 00 00 	ret

00000484 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 484:	c3 a0 00 00 	ret

00000488 <isr_init>:
		pending >>= 1;
	}
}*/

void isr_init()
{
 488:	78 01 00 00 	mvhi r1,0x0
 48c:	78 02 00 00 	mvhi r2,0x0
 490:	38 21 06 28 	ori r1,r1,0x628
 494:	38 42 04 84 	ori r2,r2,0x484
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}*/

void isr_init()
 498:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 49c:	58 22 00 00 	sw (r1+0),r2
 4a0:	34 21 00 04 	addi r1,r1,4
}*/

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 4a4:	5c 23 ff fe 	bne r1,r3,49c <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 4a8:	c3 a0 00 00 	ret

000004ac <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4ac:	78 03 00 00 	mvhi r3,0x0
 4b0:	3c 21 00 02 	sli r1,r1,2
 4b4:	38 63 06 28 	ori r3,r3,0x628
 4b8:	b4 61 18 00 	add r3,r3,r1
 4bc:	58 62 00 00 	sw (r3+0),r2
}
 4c0:	c3 a0 00 00 	ret

000004c4 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 4c4:	78 03 00 00 	mvhi r3,0x0
 4c8:	3c 21 00 02 	sli r1,r1,2
 4cc:	38 63 06 28 	ori r3,r3,0x628
 4d0:	78 02 00 00 	mvhi r2,0x0
 4d4:	b4 61 18 00 	add r3,r3,r1
 4d8:	38 42 04 84 	ori r2,r2,0x484
 4dc:	58 62 00 00 	sw (r3+0),r2
}
 4e0:	c3 a0 00 00 	ret

000004e4 <lcd_wait>:

/***************************************************************************
 * LCD Functions
 */
void lcd_wait()
{   
 4e4:	78 01 00 00 	mvhi r1,0x0
 4e8:	38 21 06 18 	ori r1,r1,0x618
 4ec:	28 22 00 00 	lw r2,(r1+0)
	while (! (lcd0->lcd_cr & LCD_RDY));
 4f0:	28 41 00 00 	lw r1,(r2+0)
 4f4:	20 21 00 01 	andi r1,r1,0x1
 4f8:	44 20 ff fe 	be r1,r0,4f0 <lcd_wait+0xc>
}
 4fc:	c3 a0 00 00 	ret

00000500 <lcd_write>:

void lcd_write(uint32_t dat0, uint32_t dat1, uint32_t dat2, uint32_t dat3, uint32_t dat4)
{
	if(lcd0->lcd_cr & LCD_RDY){
 500:	78 06 00 00 	mvhi r6,0x0
 504:	38 c6 06 18 	ori r6,r6,0x618
 508:	28 c6 00 00 	lw r6,(r6+0)
 50c:	28 c7 00 00 	lw r7,(r6+0)
 510:	20 e7 00 01 	andi r7,r7,0x1
 514:	44 e0 00 08 	be r7,r0,534 <lcd_write+0x34>
	lcd0->data0 = dat0;
 518:	58 c1 00 04 	sw (r6+4),r1
	lcd0->data1 = dat1;
 51c:	58 c2 00 08 	sw (r6+8),r2
	lcd0->data2 = dat2;
 520:	58 c3 00 0c 	sw (r6+12),r3
	lcd0->data3 = dat3;
 524:	58 c4 00 10 	sw (r6+16),r4
	lcd0->data4 = dat4;
 528:	58 c5 00 14 	sw (r6+20),r5
	lcd0->lcd_ins = LCD_WR;	
 52c:	34 01 00 01 	mvi r1,1
 530:	58 c1 00 18 	sw (r6+24),r1
 534:	c3 a0 00 00 	ret

00000538 <lcd_clear>:
	}
}

void lcd_clear()
{
	if(lcd0->lcd_cr & LCD_RDY){
 538:	78 01 00 00 	mvhi r1,0x0
 53c:	38 21 06 18 	ori r1,r1,0x618
 540:	28 21 00 00 	lw r1,(r1+0)
 544:	28 22 00 00 	lw r2,(r1+0)
 548:	20 42 00 01 	andi r2,r2,0x1
 54c:	44 40 00 03 	be r2,r0,558 <lcd_clear+0x20>
	lcd0->lcd_ins = LCD_CLR;
 550:	34 02 00 02 	mvi r2,2
 554:	58 22 00 18 	sw (r1+24),r2
 558:	c3 a0 00 00 	ret

0000055c <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 55c:	c3 a0 00 00 	ret

00000560 <uart_getchar>:

char uart_getchar()
{   
 560:	78 01 00 00 	mvhi r1,0x0
 564:	38 21 06 14 	ori r1,r1,0x614
 568:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 56c:	28 41 00 00 	lw r1,(r2+0)
 570:	20 21 00 01 	andi r1,r1,0x1
 574:	44 20 ff fe 	be r1,r0,56c <uart_getchar+0xc>
	return uart0->rxtx;
 578:	28 41 00 04 	lw r1,(r2+4)
}
 57c:	20 21 00 ff 	andi r1,r1,0xff
 580:	c3 a0 00 00 	ret

00000584 <uart_putchar>:

void uart_putchar(char c)
{
 584:	78 02 00 00 	mvhi r2,0x0
 588:	38 42 06 14 	ori r2,r2,0x614
 58c:	28 43 00 00 	lw r3,(r2+0)
 590:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 594:	28 62 00 00 	lw r2,(r3+0)
 598:	20 42 00 10 	andi r2,r2,0x10
 59c:	5c 40 ff fe 	bne r2,r0,594 <uart_putchar+0x10>
	uart0->rxtx = c;
 5a0:	58 61 00 04 	sw (r3+4),r1
}
 5a4:	c3 a0 00 00 	ret

000005a8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5a8:	40 24 00 00 	lbu r4,(r1+0)
 5ac:	44 80 00 0b 	be r4,r0,5d8 <uart_putstr+0x30>
 5b0:	78 02 00 00 	mvhi r2,0x0
 5b4:	38 42 06 14 	ori r2,r2,0x614
 5b8:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5bc:	28 62 00 00 	lw r2,(r3+0)
 5c0:	20 42 00 10 	andi r2,r2,0x10
 5c4:	5c 40 ff fe 	bne r2,r0,5bc <uart_putstr+0x14>
	uart0->rxtx = c;
 5c8:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 5cc:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5d0:	40 24 00 00 	lbu r4,(r1+0)
 5d4:	5c 82 ff fa 	bne r4,r2,5bc <uart_putstr+0x14>
 5d8:	c3 a0 00 00 	ret
